name: Automated Newsletter System

on:
  schedule:
    # Monday at 10 AM UTC (Weekly Digest)
    - cron: '0 10 * * 1'
    # Wednesday at 10 AM UTC (Innovation Report)
    - cron: '0 10 * * 3'
    # Friday at 10 AM UTC (Business & Careers)
    - cron: '0 10 * * 5'
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      newsletter_type:
        description: 'Newsletter type to generate'
        required: true
        default: 'weekly-digest'
        type: choice
        options:
          - weekly-digest
          - innovation-report
          - business-careers
      test_mode:
        description: 'Run in test mode (no emails sent)'
        required: false
        default: false
        type: boolean

env:
  # Azure OpenAI
  AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
  AZURE_OPENAI_IMAGE_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_IMAGE_DEPLOYMENT_NAME }}
  
  # Supabase
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  
  # Resend
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  RESEND_FROM_EMAIL: ${{ secrets.RESEND_FROM_EMAIL }}
  RESEND_AUDIENCE_ID: ${{ secrets.RESEND_AUDIENCE_ID }}
  
  # Stripe
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
  
  # Slack
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_ALERTS_WEBHOOK: ${{ secrets.SLACK_ALERTS_WEBHOOK }}
  SLACK_STATUS_WEBHOOK: ${{ secrets.SLACK_STATUS_WEBHOOK }}
  SLACK_ANALYTICS_WEBHOOK: ${{ secrets.SLACK_ANALYTICS_WEBHOOK }}
  
  # Linear
  LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
  LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
  LINEAR_PROJECT_ID: ${{ secrets.LINEAR_PROJECT_ID }}
  
  # App
  NEXT_PUBLIC_APP_URL: ${{ secrets.APP_URL }}
  ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
  NODE_ENV: production

jobs:
  generate-and-send-newsletter:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm run build
      
      - name: Determine newsletter type
        id: newsletter-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.newsletter_type }}" >> $GITHUB_OUTPUT
          else
            # Determine type based on day of week
            DAY=$(date +%u)
            case $DAY in
              1) TYPE="weekly-digest" ;;
              3) TYPE="innovation-report" ;;
              5) TYPE="business-careers" ;;
              *) TYPE="weekly-digest" ;;
            esac
            echo "type=$TYPE" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate newsletter content
        id: generate
        run: |
          echo "üöÄ Generating ${{ steps.newsletter-type.outputs.type }} newsletter..."
          
          if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
            npx tsx backend/automation/content-generator.ts ${{ steps.newsletter-type.outputs.type }} --test
          else
            npx tsx backend/automation/content-generator.ts ${{ steps.newsletter-type.outputs.type }}
          fi
          
          # Capture the generated newsletter ID from output
          echo "newsletter_id=$(ls -t frontend/data/generated-newsletters/*.ts | head -1 | xargs basename | sed 's/.ts$//')" >> $GITHUB_OUTPUT
      
      - name: Commit generated newsletter
        if: success() && github.event.inputs.test_mode != 'true'
        run: |
          git config --global user.name 'Newsletter Bot'
          git config --global user.email 'bot@infiniterunway.com'
          
          # Add generated files
          git add frontend/data/generated-newsletters/
          git add frontend/public/images/newsletters/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Add newsletter: ${{ steps.newsletter-type.outputs.type }} - $(date +'%Y-%m-%d')"
            git push
          fi
      
      - name: Wait for deployment
        if: success() && github.event.inputs.test_mode != 'true'
        run: |
          echo "‚è±Ô∏è Waiting for Vercel deployment..."
          sleep 90
      
      - name: Send newsletter emails
        if: success()
        run: |
          echo "üìß Sending newsletter emails..."
          
          if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
            npx tsx backend/automation/email-sender.ts ${{ steps.generate.outputs.newsletter_id }} --test --email=${{ env.ADMIN_EMAIL }}
          else
            npx tsx backend/automation/email-sender.ts ${{ steps.generate.outputs.newsletter_id }}
          fi
      
      - name: Update status and analytics
        if: always()
        run: |
          echo "üìä Updating status..."
          npx tsx backend/automation/analytics.ts
      
      - name: Error notification
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_ALERTS_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "üö® Newsletter automation failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Newsletter Automation Failed"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Type:*\n${{ steps.newsletter-type.outputs.type }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Time:*\n'"$(date)"'"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\nRequires manual intervention"
                    }
                  ]
                }
              ]
            }'

  weekly-analytics:
    runs-on: ubuntu-latest
    # Run every Sunday at 6 PM UTC
    if: github.event.schedule == '0 18 * * 0' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate weekly summary
        run: |
          echo "üìä Generating weekly analytics summary..."
          npx tsx backend/automation/analytics.ts weekly-summary

  health-check:
    runs-on: ubuntu-latest
    # Run every 6 hours
    if: github.event.schedule == '0 */6 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run health check
        run: |
          echo "üè• Running system health check..."
          npx tsx backend/automation/analytics.ts health-check
      
      - name: Alert on failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_ALERTS_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "üö® System health check failed! Immediate attention required."
            }'